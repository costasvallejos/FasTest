import os
from supabase import create_client, Client

# tests SCHEMA for reference:
"""
create table public.tests (
  id uuid not null default gen_random_uuid (),
  name text not null,
  description text null,
  plan text[] not null,
  target_url text not null,
  last_run_at timestamp with time zone null,
  last_passed boolean null,
  last_error_message text null,
  last_screenshot_path text null,
  created_at timestamp with time zone null default now(),
  test_script character varying null,
  constraint test_cases_pkey primary key (id)
) TABLESPACE pg_default;

create unique INDEX IF not exists ux_test_cases_name_ci on public.tests using btree (lower(name)) TABLESPACE pg_default;

create index IF not exists idx_tests_last_run_at on public.tests using btree (last_run_at desc) TABLESPACE pg_default;

create index IF not exists idx_tests_last_passed on public.tests using btree (last_passed) TABLESPACE pg_default;
"""


# runs SCHEMA for reference:
"""
create table public.runs (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  screenshot_bucket_id text null,
  success boolean null,
  successful_steps text[] null,
  constraint Runs_pkey primary key (id)
) TABLESPACE pg_default;
"""


def get_supabase_client() -> Client:
    """
    Get the Supabase client instance.

    Returns:
        Supabase Client
    """
    url: str = os.environ.get("SUPABASE_URL")
    key: str = os.environ.get("SUPABASE_KEY")
    supabase: Client = create_client(url, key)

    return supabase


def get_test_script(test_id: str) -> str | None:
    """
    Retrieve the test_script for a given test id.

    Args:
        test_id: The UUID of the test

    Returns:
        The test_script string if found, None otherwise
    """

    supabase = get_supabase_client()

    result = (
        supabase.table("tests")
        .select("test_script")
        .eq("id", test_id)
        .single()
        .execute()
    )
    return result.data.get("test_script") if result.data else None
